Speedup experiment test

Commit: 3d57cf5cf778b44493ff45c782fa4900be051c9d

Training and classification are parallel, but not description. Grid search
still not implemented. 

Scale: 10%
==========
Single-thread: 0m21.884s
Multi-thread: 0m17.426s

Speedup: 20.4% speedup

Scale: 20%
==========
Single-thread: 1m6.170s = 66.170s
Multi-thread: 0m54.370s

Speedup: 17.8% speedup

--------------------------------------------------------------------------------

Memory usage experiment

Scale: 10%
memusg: peak=259156

Scale 12.5%
memusg: peak=263272

Scale 15%
memusg: peak=270568

Scale 17.5%
memusg: peak=351668

Scale: 20%
memusg: peak=379988

--------------------------------------------------------------------------------

Memory and exectution time of with individual fold maps vs no maps

With maps
=========
Scale: 10%
Time: 18.008s
Mempeak: 272964 266252 276268

No maps
=======
Scale: 10%
Time: 12.596s
Mempeak: 266980

--------------------------------------------------------------------------------

KNN optimization

Commit: fd32edb2e6d14dfbd8dba8367fc87cc22922361a
Notes: with all other classifiers disabled

First, we test the same K in different scales to see how much the accuracy 
changes. The goal is to see if we can do the optimization with smaller
scale, to make it faster.

Using k = 5

Start: 0.1, end: 0.3, step: 1.25

SCALE                  ACC          KAPPA
0.1                    0.763211     0.655023
0.125                  0.901639     0.725188
0.15625                0.821513     0.727863
0.1953125              0.820054     0.732829
0.244140625            0.791455     0.729246
0.30517578125          0.747528     0.679938

Result: correlation between kappa and scale is very low (0.08218886), which
suggests it is independent and that we can test using an arbitrary scale.

NOTE: how to report statistical confidence that two variables are independent?

Now we test, with scale 0.15, some values of k

K      ACC      KAPPA      EXECUTION TIME
2      0.842601 0.796558   0m15.958s
3      0.842601 0.796558   0m13.086s
5      0.842601 0.796558   0m13.745s
8      0.842601 0.796558   0m15.456s
13     0.842601 0.796558   0m18.675s
21     0.842601 0.796558   0m15.468s

It seems that these values of K are too small to make a difference. We then 
test with larger steps.

K     ACC      KAPPA       EXECUTION TIME
32    0.507365 0.36039     NOT MEASURED
64    0.507365 0.36039     NOT MEASURED
128   0.507365 0.36039     0m15.723s

Based on this, we choose k = 5 and max_k = 32, OpenCV's default.

--------------------------------------------------------------------------------

MLP optimization

We change the hidden layer size, n.

n     ACC      KAPPA       EXECUTION TIME
2     0.805128 0.59108     0m15.819s
3     0.755769 0.520238    0m15.402s
5     0.814744 0.603096    0m15.322s
8     0.880769 0.72174     0m12.941s
13    0.892949 0.751946    0m15.622s
21    0.806786 0.745706    0m14.764s
34    0.896154 0.759334    0m16.755s
55    0.901923 0.770098    0m17.277s
89    0.899359 0.759446    0m17.657s
144   0.848438 0.758206    0m18.998s
233   0.624882 0.515858    0m21.208s

It seems to peak around n = 55, so we choose that value.

Now, we test to see if scale changes will affect the kappa.

Using n = 55

SCALE                  ACC      KAPPA
0.1                    0.903926 0.755262
0.125                  0.84926  0.80084
0.15625                0.709125 0.539621
0.1953125              0.89602  0.715223
0.244140625            0.895636 0.85894
0.30517578125          0.838354 0.78165

Correlation is 0.2965351, a little high, but still possibly independent.

We run more experiments with step 1.1, results in mlp_varying_scale_2.csv.
Correlation is 0.3885179, but it can be incidental. The scatter plot does
not show much of a pattern and the function is not monotonic.

--------------------------------------------------------------------------------

DTREE optimization

There are many parameters we can change. We choose to test the min_sample_count
parameter and the priors parameter to see the effect. As usual, we will run the 
tests using scale = 0.15.

Min sample count, n

n     ACC      KAPPA
-1    0.767308 0.566675
0     0.767308 0.566675
1     0.767308 0.566675
2     0.66164  0.58297
32    0.722436 0.525799
128   0.41768  0.248403
512   0.049010 0

It seems clear that an increase in n make the results worse. To be sure, though,
we test some values between 2 and 21.

n     ACC      KAPPA   
2     0.66164  0.58297
3     0.66164  0.584047
5     0.6918   0.621797
8     0.760897 0.567474
13    0.666121 0.573589
21    0.585297 0.480436

From this, we see that the value of 5 seems to be a good value, and so we use 
it. This was tested with no priors vector.

===

